import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ExcelPDFProcessor {
    public static void main(String[] args) {
        try {
            // Define the Excel file path (input and output are the same)
            String filePath = "input.xlsx";
            File excelFile = new File(filePath);

            // Load Excel file
            FileInputStream fis = new FileInputStream(excelFile);
            Workbook workbook = new XSSFWorkbook(fis);
            Sheet sheet = workbook.getSheetAt(0);

            // Pattern to extract PF_xxxxx_yyyy
            Pattern pattern = Pattern.compile("PF_(\\d{5})_(\\d{4})");

            // Iterate through all rows starting from row 2 (index 1)
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) {
                    row = sheet.createRow(i); // Create row if it doesn't exist
                }

                // Get string from column B (index 1)
                Cell bCell = row.getCell(1, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                if (bCell.getCellType() != CellType.STRING || bCell.getStringCellValue().isEmpty()) {
                    continue; // Skip if column B is empty or not a string
                }
                String bValue = bCell.getStringCellValue();

                // Extract pattern
                Matcher matcher = pattern.matcher(bValue);
                if (!matcher.find()) {
                    continue; // Skip if pattern not found
                }

                String xxxxx = matcher.group(1);
                String yyyy = matcher.group(2);
                String convertedPattern = String.format("PF-%s(%s/%s)", xxxxx, yyyy.substring(0, 2), yyyy.substring(2));

                // Update column A (index 0) with converted pattern
                Cell aCell = row.getCell(0, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                aCell.setCellValue(convertedPattern);

                // Get PDF path from column C (index 2)
                Cell cCell = row.getCell(2, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                if (cCell.getCellType() != CellType.STRING || cCell.getStringCellValue().isEmpty()) {
                    continue; // Skip if column C is empty or not a string
                }
                String pdfPath = cCell.getStringCellValue();
                File pdfFile = new File(pdfPath);
                if (!pdfFile.exists()) {
                    Cell eCell = row.getCell(4, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                    eCell.setCellValue("PDF Not Found");
                    continue;
                }

                // Process PDF
                try (PDDocument document = PDDocument.load(pdfFile)) {
                    PDFTextStripper stripper = new PDFTextStripper();
                    int totalPages = document.getNumberOfPages();
                    int startPage = -1;
                    int endPage = -1;

                    // Search each page for the converted pattern in footer
                    for (int page = 1; page <= totalPages; page++) {
                        stripper.setStartPage(page);
                        stripper.setEndPage(page);
                        String text = stripper.getText(document);

                        if (text.contains(convertedPattern)) {
                            if (startPage == -1) {
                                startPage = page;
                            }
                            endPage = page;
                        }
                    }

                    // Update column E (index 4) with page numbers
                    Cell eCell = row.getCell(4, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                    if (startPage != -1) {
                        if (startPage == endPage) {
                            eCell.setCellValue(String.valueOf(startPage));
                        } else {
                            eCell.setCellValue(startPage + "-" + endPage);
                        }
                    } else {
                        eCell.setCellValue("Pattern Not Found");
                    }
                }
            }

            // Close the input stream before writing to the same file
            fis.close();

            // Save the updated Excel file to the same path
            try (FileOutputStream fos = new FileOutputStream(excelFile)) {
                workbook.write(fos);
            }

            // Close the workbook
            workbook.close();

            System.out.println("Excel file updated successfully at: " + filePath);

        } catch (Exception e) {
            System.err.println("Error processing the file: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
