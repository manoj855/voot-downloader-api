Option Explicit

Sub BuildTestCases_Final()
    Dim ws As Worksheet
    Set ws = ActiveSheet  ' Works on any sheet
    
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "J").End(xlUp).Row
    If lastRow < 2 Then
        MsgBox "No data rows found.", vbExclamation
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    On Error GoTo Cleanup

    ' --- Read all data ---
    Dim n As Long: n = lastRow - 1
    Dim effArr, expArr, directArr, deregArr, issueArr, domArr, covArr, sectArr, claimArr
    effArr = ws.Range("J2:J" & lastRow).Value2
    expArr = ws.Range("K2:K" & lastRow).Value2
    directArr = ws.Range("O2:O" & lastRow).Value2
    deregArr = ws.Range("P2:P" & lastRow).Value2
    issueArr = ws.Range("Q2:Q" & lastRow).Value2
    domArr = ws.Range("R2:R" & lastRow).Value2
    covArr = ws.Range("S2:S" & lastRow).Value2
    sectArr = ws.Range("T2:T" & lastRow).Value2
    claimArr = ws.Range("U2:U" & lastRow).Value2

    ' --- Union-Find init ---
    Dim parent() As Long, rankArr() As Long
    ReDim parent(1 To n)
    ReDim rankArr(1 To n)
    Dim i As Long
    For i = 1 To n
        parent(i) = i
        rankArr(i) = 0
    Next i

    ' --- Pairwise comparison ---
    Dim ii As Long, jj As Long
    For ii = 1 To n - 1
        For jj = ii + 1 To n
            If RowsAreMatching(ii, jj, effArr, expArr, directArr, deregArr, issueArr, domArr, covArr, sectArr, claimArr) Then
                UFUnion parent, rankArr, ii, jj
            End If
        Next jj
    Next ii

    ' --- Map root to group ---
    Dim rootDict As Object: Set rootDict = CreateObject("Scripting.Dictionary")
    Dim root As Long, groupNum As Long: groupNum = 0
    For i = 1 To n
        root = UFFind(parent, i)
        If Not rootDict.Exists(root) Then
            groupNum = groupNum + 1
            rootDict(root) = groupNum
        End If
    Next i

    ' --- Collect members ---
    Dim groups As Object: Set groups = CreateObject("Scripting.Dictionary")
    Dim idx As Long
    For idx = 1 To n
        root = UFFind(parent, idx)
        Dim g As Long: g = rootDict(root)
        If Not groups.Exists(g) Then Set groups(g) = New Collection
        groups(g).Add idx
    Next idx

    ' --- Create output sheets ---
    Dim outWs As Worksheet, logWs As Worksheet
    On Error Resume Next
    Set outWs = ThisWorkbook.Sheets("TC_Output")
    Set logWs = ThisWorkbook.Sheets("Merge_Log")
    On Error GoTo 0
    If outWs Is Nothing Then
        Set outWs = ThisWorkbook.Sheets.Add
        outWs.Name = "TC_Output"
    Else
        outWs.Cells.Clear
    End If
    If logWs Is Nothing Then
        Set logWs = ThisWorkbook.Sheets.Add
        logWs.Name = "Merge_Log"
    Else
        logWs.Cells.Clear
    End If
    
    ws.Rows(1).Copy outWs.Rows(1)
    logWs.Range("A1:E1").Value = Array("TC_No", "Rows", "CommonDate", "CommonIssuingCompany", "CommonDomicile")
    
    Dim outRow As Long: outRow = 2
    Dim TCcounter As Long: TCcounter = 1

    ' --- Write groups ---
    Dim gIdx As Variant
    For Each gIdx In groups.Keys
        Dim col As Collection
        Set col = groups(gIdx)

        Dim commonIss As String, commonDom As String, commonDate As String
        commonIss = ""
        commonDom = ""
        commonDate = ""

        ' Compute common fields
        Dim effStart As Double, expEnd As Double
        effStart = -1E+99
        expEnd = 1E+99
        Dim haveEff As Boolean, haveExp As Boolean
        haveEff = False: haveExp = False

        Dim r As Variant
        For Each r In col
            If IsDate(effArr(r, 1)) Then
                If Not haveEff Then haveEff = True
                If CDbl(CDate(effArr(r, 1))) > effStart Then effStart = CDbl(CDate(effArr(r, 1)))
            End If
            If IsDate(expArr(r, 1)) Then
                If Not haveExp Then haveExp = True
                If CDbl(CDate(expArr(r, 1))) < expEnd Then expEnd = CDbl(CDate(expArr(r, 1)))
            End If
            If Trim(issueArr(r, 1)) <> "" Then
                If commonIss = "" Then
                    commonIss = Trim(issueArr(r, 1))
                Else
                    commonIss = StrictIntersect(commonIss, Trim(issueArr(r, 1)))
                End If
            End If
            If Trim(domArr(r, 1)) <> "" Then
                If commonDom = "" Then
                    commonDom = Trim(domArr(r, 1))
                Else
                    commonDom = StrictIntersect(commonDom, Trim(domArr(r, 1)))
                End If
            End If
        Next r

        ' Compute common date
        If haveEff Then
            If haveExp Then
                If effStart <= expEnd Then
                    commonDate = Format(CDate(effStart), "dd/mm/yyyy")
                End If
            Else
                commonDate = Format(CDate(effStart), "dd/mm/yyyy")
            End If
        End If

        ' --- Write rows ---
        Dim startRow As Long: startRow = outRow
        For Each r In col
            ws.Rows(r + 1).Copy outWs.Rows(outRow)
            outRow = outRow + 1
        Next r
        Dim endRow As Long: endRow = outRow - 1

        ' --- Merge A–C and write TC info ---
        With outWs
            .Range(.Cells(startRow, "A"), .Cells(endRow, "A")).Merge
            .Range(.Cells(startRow, "B"), .Cells(endRow, "B")).Merge
            .Range(.Cells(startRow, "C"), .Cells(endRow, "C")).Merge
            .Cells(startRow, "A").Value = "TC_" & TCcounter
            .Cells(startRow, "X").Value = commonDate
            .Cells(startRow, "Y").Value = commonIss
            .Cells(startRow, "Z").Value = commonDom
        End With
        
        ' --- Log ---
        Dim allRows As String: allRows = ""
        For Each r In col
            allRows = allRows & (r + 1) & ","
        Next r
        If Right(allRows, 1) = "," Then allRows = Left(allRows, Len(allRows) - 1)
        logWs.Cells(TCcounter + 1, 1).Value = "TC_" & TCcounter
        logWs.Cells(TCcounter + 1, 2).Value = allRows
        logWs.Cells(TCcounter + 1, 3).Value = commonDate
        logWs.Cells(TCcounter + 1, 4).Value = commonIss
        logWs.Cells(TCcounter + 1, 5).Value = commonDom
        
        TCcounter = TCcounter + 1
    Next gIdx
    
    outWs.Columns.AutoFit
    logWs.Columns.AutoFit
    
    MsgBox "✅ Done! Check 'TC_Output' and 'Merge_Log'.", vbInformation
    
Cleanup:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
End Sub

' ---------------------- Helper Functions ----------------------

Function RowsAreMatching(ii As Long, jj As Long, effArr, expArr, directArr, deregArr, issueArr, domArr, covArr, sectArr, claimArr) As Boolean
    RowsAreMatching = False
    
    Dim eff1, eff2, exp1, exp2
    eff1 = effArr(ii, 1): eff2 = effArr(jj, 1)
    exp1 = expArr(ii, 1): exp2 = expArr(jj, 1)
    
    ' Date compatibility
    If IsDate(eff1) And IsDate(exp1) And IsDate(eff2) And IsDate(exp2) Then
        If Not (CDate(eff2) <= CDate(exp1) And CDate(exp2) >= CDate(eff1)) Then Exit Function
    End If
    
    ' Dereg logic
    Dim d1 As String, d2 As String
    d1 = LCase(Trim(CStr(deregArr(ii, 1))))
    d2 = LCase(Trim(CStr(deregArr(jj, 1))))
    If d1 <> "" And d2 <> "" Then
        If (d1 <> d2) And (d1 <> "both") And (d2 <> "both") Then Exit Function
    End If
    
    ' Direct logic
    Dim dir1 As String, dir2 As String
    dir1 = LCase(Trim(CStr(directArr(ii, 1))))
    dir2 = LCase(Trim(CStr(directArr(jj, 1))))
    If dir1 <> "" And dir2 <> "" Then
        If dir1 <> dir2 Then Exit Function
    End If
    
    ' Company & domicile match strictly
    If Not StrictMatch(Trim(CStr(issueArr(ii, 1))), Trim(CStr(issueArr(jj, 1)))) Then Exit Function
    If Not StrictMatch(Trim(CStr(domArr(ii, 1))), Trim(CStr(domArr(jj, 1)))) Then Exit Function
    
    RowsAreMatching = True
End Function

Function StrictMatch(a As String, b As String) As Boolean
    StrictMatch = False
    If a = "" Or b = "" Then Exit Function
    Dim arrA() As String, arrB() As String, i As Long, j As Long
    arrA = Split(a, ","): arrB = Split(b, ",")
    For i = LBound(arrA) To UBound(arrA)
        For j = LBound(arrB) To UBound(arrB)
            If Trim(arrA(i)) <> "" And Trim(arrB(j)) <> "" Then
                If LCase(Trim(arrA(i))) = LCase(Trim(arrB(j))) Then
                    StrictMatch = True
                    Exit Function
                End If
            End If
        Next j
    Next i
End Function

Function StrictIntersect(a As String, b As String) As String
    Dim arrA() As String, arrB() As String, dict As Object
    Set dict = CreateObject("Scripting.Dictionary")
    Dim i As Long, token As String, result As String: result = ""
    If a = "" Or b = "" Then Exit Function
    arrB = Split(b, ",")
    For i = LBound(arrB) To UBound(arrB)
        token = LCase(Trim(arrB(i)))
        If token <> "" Then dict(token) = 1
    Next i
    arrA = Split(a, ",")
    For i = LBound(arrA) To UBound(arrA)
        token = Trim(arrA(i))
        If token <> "" Then
            If dict.Exists(LCase(token)) Then
                If result = "" Then result = token Else result = result & ", " & token
            End If
        End If
    Next i
    StrictIntersect = result
End Function

' --- Union-Find ---
Function UFFind(parent() As Long, x As Long) As Long
    If parent(x) <> x Then parent(x) = UFFind(parent, parent(x))
    UFFind = parent(x)
End Function

Sub UFUnion(parent() As Long, rankArr() As Long, x As Long, y As Long)
    Dim rx As Long, ry As Long
    rx = UFFind(parent, x)
    ry = UFFind(parent, y)
    If rx = ry Then Exit Sub
    If rankArr(rx) < rankArr(ry) Then
        parent(rx) = ry
    ElseIf rankArr(rx) > rankArr(ry) Then
        parent(ry) = rx
    Else
        parent(ry) = rx
        rankArr(rx) = rankArr(rx) + 1
    End If
End Sub
